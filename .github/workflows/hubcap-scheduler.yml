name: Hubcap Scheduler

on:
  schedule:
    # Run every hour at :00 for production
    - cron: '0 * * * *'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run against'
        required: true
        default: 'test'
        type: choice
        options:
        - 'test'
        - 'production'
      dry_run:
        description: 'Run in dry-run mode (no PRs created)'
        required: false
        default: 'true'
        type: choice
        options:
        - 'true'
        - 'false'

jobs:
  hubcap:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Check out the repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -r requirements.txt

      - name: Configure environment
        env:
          HUBCAP_CONFIG: ${{ secrets.HUBCAP_CONFIG }}
          INPUT_DRY_RUN: ${{ github.event.inputs.dry_run || 'false' }}
          ENVIRONMENT: ${{ github.event.inputs.environment || 'production' }}
        run: |
          echo "Using $ENVIRONMENT environment configuration"
          echo "$HUBCAP_CONFIG" > base_config.json
          
          # Modify config for dry run if requested
          if [ "$INPUT_DRY_RUN" = "true" ]; then
            echo "Enabling dry-run mode (push_branches = false)"
            jq '.push_branches = false' base_config.json > config.json
          else
            echo "Running in live mode (push_branches = true)"
            cp base_config.json config.json
          fi
          
          # Set the CONFIG environment variable for hubcap.py
          echo "CONFIG<<EOF" >> $GITHUB_ENV
          cat config.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Log the configuration (without sensitive data)
          echo "Configuration summary:"
          jq 'del(.user.token)' config.json

      - name: Run hubcap
        run: |
          echo "Starting hubcap execution..."
          python3 hubcap.py 2>&1 | tee hubcap.log

      - name: Check execution results
        if: always()
        run: |
          echo "=== Execution Summary ==="
          
          # Check for errors
          if grep -q 'ERROR' hubcap.log; then
            echo "‚ùå Found ERROR events in execution:"
            grep 'ERROR' hubcap.log
            echo "EXECUTION_STATUS=failed" >> $GITHUB_ENV
          else
            echo "‚úÖ No ERROR-level log entries found"
          fi
          
          # Check for successful completion
          if grep -q 'hubcap execution completed successfully' hubcap.log; then
            echo "‚úÖ Hubcap completed successfully"
            echo "EXECUTION_STATUS=success" >> $GITHUB_ENV
          elif grep -q 'No packages have new versions to update' hubcap.log; then
            echo "‚úÖ Hubcap completed successfully (no updates needed)"
            echo "EXECUTION_STATUS=success" >> $GITHUB_ENV
          else
            echo "‚ùå Hubcap did not complete successfully"
            echo "EXECUTION_STATUS=failed" >> $GITHUB_ENV
          fi
          
          # Summary of what was processed
          if grep -q 'Pushing branches:' hubcap.log; then
            echo "üìù Branches processed:"
            grep 'Pushing branches:' hubcap.log
          fi

      - name: Upload execution artifacts
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: hubcap-execution-${{ github.event.inputs.environment || 'production' }}-${{ github.run_number }}
          path: |
            hubcap.log
            target/
          retention-days: 30

      - name: Fail job if execution failed
        if: always() && env.EXECUTION_STATUS == 'failed'
        run: |
          echo "‚ùå Hubcap execution failed - check logs above"
          exit 1