name: Tests and Code Checks

on: [pull_request]

jobs:
  verify-json:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Validate JSON
        run: "cat hub.json | python3 -m json.tool"

  hubcap-dry-run:
    name: Hubcap Dry Run
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install dependencies with uv
        run: |
          uv pip install --system -r requirements.txt
          uv pip install --system -r requirements-dev.txt

      - name: Create test config
        run: |
          cat > config.json << EOF
          {
            "org": "dbt-labs",
            "repo": "hub.getdbt.com",
            "push_branches": false,
            "one_branch_per_repo": true,
            "user": {
              "name": "github-actions",
              "email": "github-actions@github.com",
              "token": "dummy-token"
            }
          }
          EOF

      - name: Set environment variables
        run: |
          echo "CONFIG<<EOF" >> $GITHUB_ENV
          cat config.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV


      - name: Run hubcap dry run
        run: |
          set -o pipefail
          # tee to capture the full output (stdout+stderr) into hubcap.log
          PYTHONPATH=${{ github.workspace }} python3 hubcap.py 2>&1 | tee hubcap.log

      - name: Check for any hubcap errors
        if: always()
        run: |
          if grep -q 'ERROR' hubcap.log; then
            echo "Found ERROR events in hubcap.log:"
            grep 'ERROR' hubcap.log
            exit 1
          else
            echo "No ERROR-level log entries found."
          fi

  code-quality:
    name: code-quality

    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install python dependencies with uv
        run: |
          uv pip install --system pre-commit
          pre-commit --version
          uv pip install --system -r requirements.txt
          uv pip install --system -r requirements-dev.txt
      - name: Run pre-commit hooks
        run: pre-commit run --all-files --show-diff-on-failure

  unit:
    name: unit test / python ${{ matrix.python-version }} / ${{ matrix.os }}

    runs-on: ${{ matrix.os }}
    timeout-minutes: 10

    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9"]
        os: [ubuntu-latest]

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          version: "latest"

      - name: Install dependencies with uv
        run: |
          uv pip install --system -r requirements.txt
          uv pip install --system -r requirements-dev.txt

      - name: Install dbt fusion (for integration tests)
        run: |
          curl -fsSL https://public.cdn.getdbt.com/fs/install/install.sh | sh -s -- --update

      - name: Run tests with pytest
        run: |
          uv run pytest tests/ -v --tb=short
